
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  id42: number | null
  email: string
  username: string
  password: string
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  userId: number
  firstName: string
  lastName: string
  email: string
  username: string
  status: string
  lastMessage: string | null
  lastMessageTime: Date | null
  avatar: string | null
  background: string | null
  gaemePlayed: number
  win: number
  lose: number
  points: number
  level: number
}

/**
 * Model channels
 * 
 */
export type channels = {
  id: string
  type: string
  name: string
  password: string | null
  accessPassword: string | null
  userId: number | null
  avatar: string | null
  accessIsActived: boolean
}

/**
 * Model Message
 * 
 */
export type Message = {
  id: number
  fromId: number | null
  fromName: string | null
  toId: number | null
  content: string
  createdAt: Date
  userId: number | null
  channelsId: string | null
}

/**
 * Model BlockList
 * 
 */
export type BlockList = {
  id: number
  blockedId: number
  userId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.channels`: Exposes CRUD operations for the **channels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channels.findMany()
    * ```
    */
  get channels(): Prisma.channelsDelegate<GlobalReject>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject>;

  /**
   * `prisma.blockList`: Exposes CRUD operations for the **BlockList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BlockLists
    * const blockLists = await prisma.blockList.findMany()
    * ```
    */
  get blockList(): Prisma.BlockListDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    channels: 'channels',
    Message: 'Message',
    BlockList: 'BlockList'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    dmMessages: number
    BlockList: number
    channels: number
    channelsOwner: number
    channelsAdmin: number
    channelsMember: number
    channelsMuts: number
    channelsBand: number
  }

  export type UserCountOutputTypeSelect = {
    dmMessages?: boolean
    BlockList?: boolean
    channels?: boolean
    channelsOwner?: boolean
    channelsAdmin?: boolean
    channelsMember?: boolean
    channelsMuts?: boolean
    channelsBand?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ChannelsCountOutputType
   */


  export type ChannelsCountOutputType = {
    Members: number
    Owners: number
    Admins: number
    Muts: number
    Band: number
    Messages: number
  }

  export type ChannelsCountOutputTypeSelect = {
    Members?: boolean
    Owners?: boolean
    Admins?: boolean
    Muts?: boolean
    Band?: boolean
    Messages?: boolean
  }

  export type ChannelsCountOutputTypeGetPayload<S extends boolean | null | undefined | ChannelsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChannelsCountOutputTypeArgs)
    ? ChannelsCountOutputType 
    : S extends { select: any } & (ChannelsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChannelsCountOutputType ? ChannelsCountOutputType[P] : never
  } 
      : ChannelsCountOutputType




  // Custom InputTypes

  /**
   * ChannelsCountOutputType without action
   */
  export type ChannelsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChannelsCountOutputType
     */
    select?: ChannelsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    id42: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    id42: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    id42: number | null
    email: string | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    id42: number | null
    email: string | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    id42: number
    email: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    id42?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    id42?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    id42?: true
    email?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    id42?: true
    email?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    id42?: true
    email?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    id42: number | null
    email: string
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    id42?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    profile?: boolean | ProfileArgs
    dmMessages?: boolean | User$dmMessagesArgs
    BlockList?: boolean | User$BlockListArgs
    channels?: boolean | User$channelsArgs
    channelsOwner?: boolean | User$channelsOwnerArgs
    channelsAdmin?: boolean | User$channelsAdminArgs
    channelsMember?: boolean | User$channelsMemberArgs
    channelsMuts?: boolean | User$channelsMutsArgs
    channelsBand?: boolean | User$channelsBandArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    profile?: boolean | ProfileArgs
    dmMessages?: boolean | User$dmMessagesArgs
    BlockList?: boolean | User$BlockListArgs
    channels?: boolean | User$channelsArgs
    channelsOwner?: boolean | User$channelsOwnerArgs
    channelsAdmin?: boolean | User$channelsAdminArgs
    channelsMember?: boolean | User$channelsMemberArgs
    channelsMuts?: boolean | User$channelsMutsArgs
    channelsBand?: boolean | User$channelsBandArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'dmMessages' ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'BlockList' ? Array < BlockListGetPayload<S['include'][P]>>  :
        P extends 'channels' ? Array < channelsGetPayload<S['include'][P]>>  :
        P extends 'channelsOwner' ? Array < channelsGetPayload<S['include'][P]>>  :
        P extends 'channelsAdmin' ? Array < channelsGetPayload<S['include'][P]>>  :
        P extends 'channelsMember' ? Array < channelsGetPayload<S['include'][P]>>  :
        P extends 'channelsMuts' ? Array < channelsGetPayload<S['include'][P]>>  :
        P extends 'channelsBand' ? Array < channelsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'dmMessages' ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'BlockList' ? Array < BlockListGetPayload<S['select'][P]>>  :
        P extends 'channels' ? Array < channelsGetPayload<S['select'][P]>>  :
        P extends 'channelsOwner' ? Array < channelsGetPayload<S['select'][P]>>  :
        P extends 'channelsAdmin' ? Array < channelsGetPayload<S['select'][P]>>  :
        P extends 'channelsMember' ? Array < channelsGetPayload<S['select'][P]>>  :
        P extends 'channelsMuts' ? Array < channelsGetPayload<S['select'][P]>>  :
        P extends 'channelsBand' ? Array < channelsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    profile<T extends ProfileArgs= {}>(args?: Subset<T, ProfileArgs>): Prisma__ProfileClient<ProfileGetPayload<T> | Null>;

    dmMessages<T extends User$dmMessagesArgs= {}>(args?: Subset<T, User$dmMessagesArgs>): Prisma.PrismaPromise<Array<MessageGetPayload<T>>| Null>;

    BlockList<T extends User$BlockListArgs= {}>(args?: Subset<T, User$BlockListArgs>): Prisma.PrismaPromise<Array<BlockListGetPayload<T>>| Null>;

    channels<T extends User$channelsArgs= {}>(args?: Subset<T, User$channelsArgs>): Prisma.PrismaPromise<Array<channelsGetPayload<T>>| Null>;

    channelsOwner<T extends User$channelsOwnerArgs= {}>(args?: Subset<T, User$channelsOwnerArgs>): Prisma.PrismaPromise<Array<channelsGetPayload<T>>| Null>;

    channelsAdmin<T extends User$channelsAdminArgs= {}>(args?: Subset<T, User$channelsAdminArgs>): Prisma.PrismaPromise<Array<channelsGetPayload<T>>| Null>;

    channelsMember<T extends User$channelsMemberArgs= {}>(args?: Subset<T, User$channelsMemberArgs>): Prisma.PrismaPromise<Array<channelsGetPayload<T>>| Null>;

    channelsMuts<T extends User$channelsMutsArgs= {}>(args?: Subset<T, User$channelsMutsArgs>): Prisma.PrismaPromise<Array<channelsGetPayload<T>>| Null>;

    channelsBand<T extends User$channelsBandArgs= {}>(args?: Subset<T, User$channelsBandArgs>): Prisma.PrismaPromise<Array<channelsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.dmMessages
   */
  export type User$dmMessagesArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * User.BlockList
   */
  export type User$BlockListArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    where?: BlockListWhereInput
    orderBy?: Enumerable<BlockListOrderByWithRelationInput>
    cursor?: BlockListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BlockListScalarFieldEnum>
  }


  /**
   * User.channels
   */
  export type User$channelsArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * User.channelsOwner
   */
  export type User$channelsOwnerArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * User.channelsAdmin
   */
  export type User$channelsAdminArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * User.channelsMember
   */
  export type User$channelsMemberArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * User.channelsMuts
   */
  export type User$channelsMutsArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * User.channelsBand
   */
  export type User$channelsBandArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    cursor?: channelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    userId: number | null
    gaemePlayed: number | null
    win: number | null
    lose: number | null
    points: number | null
    level: number | null
  }

  export type ProfileSumAggregateOutputType = {
    userId: number | null
    gaemePlayed: number | null
    win: number | null
    lose: number | null
    points: number | null
    level: number | null
  }

  export type ProfileMinAggregateOutputType = {
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    username: string | null
    status: string | null
    lastMessage: string | null
    lastMessageTime: Date | null
    avatar: string | null
    background: string | null
    gaemePlayed: number | null
    win: number | null
    lose: number | null
    points: number | null
    level: number | null
  }

  export type ProfileMaxAggregateOutputType = {
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    username: string | null
    status: string | null
    lastMessage: string | null
    lastMessageTime: Date | null
    avatar: string | null
    background: string | null
    gaemePlayed: number | null
    win: number | null
    lose: number | null
    points: number | null
    level: number | null
  }

  export type ProfileCountAggregateOutputType = {
    userId: number
    firstName: number
    lastName: number
    email: number
    username: number
    status: number
    lastMessage: number
    lastMessageTime: number
    avatar: number
    background: number
    gaemePlayed: number
    win: number
    lose: number
    points: number
    level: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    userId?: true
    gaemePlayed?: true
    win?: true
    lose?: true
    points?: true
    level?: true
  }

  export type ProfileSumAggregateInputType = {
    userId?: true
    gaemePlayed?: true
    win?: true
    lose?: true
    points?: true
    level?: true
  }

  export type ProfileMinAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    status?: true
    lastMessage?: true
    lastMessageTime?: true
    avatar?: true
    background?: true
    gaemePlayed?: true
    win?: true
    lose?: true
    points?: true
    level?: true
  }

  export type ProfileMaxAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    status?: true
    lastMessage?: true
    lastMessageTime?: true
    avatar?: true
    background?: true
    gaemePlayed?: true
    win?: true
    lose?: true
    points?: true
    level?: true
  }

  export type ProfileCountAggregateInputType = {
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    status?: true
    lastMessage?: true
    lastMessageTime?: true
    avatar?: true
    background?: true
    gaemePlayed?: true
    win?: true
    lose?: true
    points?: true
    level?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: ProfileScalarFieldEnum[]
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    userId: number
    firstName: string
    lastName: string
    email: string
    username: string
    status: string
    lastMessage: string | null
    lastMessageTime: Date | null
    avatar: string | null
    background: string | null
    gaemePlayed: number
    win: number
    lose: number
    points: number
    level: number
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    status?: boolean
    lastMessage?: boolean
    lastMessageTime?: boolean
    avatar?: boolean
    background?: boolean
    gaemePlayed?: boolean
    win?: boolean
    lose?: boolean
    points?: boolean
    level?: boolean
    user?: boolean | UserArgs
  }


  export type ProfileInclude = {
    user?: boolean | UserArgs
  }

  export type ProfileGetPayload<S extends boolean | null | undefined | ProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Profile :
    S extends undefined ? never :
    S extends { include: any } & (ProfileArgs | ProfileFindManyArgs)
    ? Profile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProfileArgs | ProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
      : Profile


  type ProfileCountArgs = 
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const profileWithUserIdOnly = await prisma.profile.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     */
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
  }



  /**
   * Model channels
   */


  export type AggregateChannels = {
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  export type ChannelsAvgAggregateOutputType = {
    userId: number | null
  }

  export type ChannelsSumAggregateOutputType = {
    userId: number | null
  }

  export type ChannelsMinAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    password: string | null
    accessPassword: string | null
    userId: number | null
    avatar: string | null
    accessIsActived: boolean | null
  }

  export type ChannelsMaxAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    password: string | null
    accessPassword: string | null
    userId: number | null
    avatar: string | null
    accessIsActived: boolean | null
  }

  export type ChannelsCountAggregateOutputType = {
    id: number
    type: number
    name: number
    password: number
    accessPassword: number
    userId: number
    avatar: number
    accessIsActived: number
    _all: number
  }


  export type ChannelsAvgAggregateInputType = {
    userId?: true
  }

  export type ChannelsSumAggregateInputType = {
    userId?: true
  }

  export type ChannelsMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    password?: true
    accessPassword?: true
    userId?: true
    avatar?: true
    accessIsActived?: true
  }

  export type ChannelsMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    password?: true
    accessPassword?: true
    userId?: true
    avatar?: true
    accessIsActived?: true
  }

  export type ChannelsCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    password?: true
    accessPassword?: true
    userId?: true
    avatar?: true
    accessIsActived?: true
    _all?: true
  }

  export type ChannelsAggregateArgs = {
    /**
     * Filter which channels to aggregate.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned channels
    **/
    _count?: true | ChannelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelsMaxAggregateInputType
  }

  export type GetChannelsAggregateType<T extends ChannelsAggregateArgs> = {
        [P in keyof T & keyof AggregateChannels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannels[P]>
      : GetScalarType<T[P], AggregateChannels[P]>
  }




  export type ChannelsGroupByArgs = {
    where?: channelsWhereInput
    orderBy?: Enumerable<channelsOrderByWithAggregationInput>
    by: ChannelsScalarFieldEnum[]
    having?: channelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelsCountAggregateInputType | true
    _avg?: ChannelsAvgAggregateInputType
    _sum?: ChannelsSumAggregateInputType
    _min?: ChannelsMinAggregateInputType
    _max?: ChannelsMaxAggregateInputType
  }


  export type ChannelsGroupByOutputType = {
    id: string
    type: string
    name: string
    password: string | null
    accessPassword: string | null
    userId: number | null
    avatar: string | null
    accessIsActived: boolean
    _count: ChannelsCountAggregateOutputType | null
    _avg: ChannelsAvgAggregateOutputType | null
    _sum: ChannelsSumAggregateOutputType | null
    _min: ChannelsMinAggregateOutputType | null
    _max: ChannelsMaxAggregateOutputType | null
  }

  type GetChannelsGroupByPayload<T extends ChannelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelsGroupByOutputType[P]>
        }
      >
    >


  export type channelsSelect = {
    id?: boolean
    type?: boolean
    name?: boolean
    password?: boolean
    accessPassword?: boolean
    userId?: boolean
    avatar?: boolean
    accessIsActived?: boolean
    Creator?: boolean | UserArgs
    Members?: boolean | channels$MembersArgs
    Owners?: boolean | channels$OwnersArgs
    Admins?: boolean | channels$AdminsArgs
    Muts?: boolean | channels$MutsArgs
    Band?: boolean | channels$BandArgs
    Messages?: boolean | channels$MessagesArgs
    _count?: boolean | ChannelsCountOutputTypeArgs
  }


  export type channelsInclude = {
    Creator?: boolean | UserArgs
    Members?: boolean | channels$MembersArgs
    Owners?: boolean | channels$OwnersArgs
    Admins?: boolean | channels$AdminsArgs
    Muts?: boolean | channels$MutsArgs
    Band?: boolean | channels$BandArgs
    Messages?: boolean | channels$MessagesArgs
    _count?: boolean | ChannelsCountOutputTypeArgs
  }

  export type channelsGetPayload<S extends boolean | null | undefined | channelsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? channels :
    S extends undefined ? never :
    S extends { include: any } & (channelsArgs | channelsFindManyArgs)
    ? channels  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Creator' ? UserGetPayload<S['include'][P]> | null :
        P extends 'Members' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Owners' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Admins' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Muts' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Band' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Messages' ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChannelsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (channelsArgs | channelsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Creator' ? UserGetPayload<S['select'][P]> | null :
        P extends 'Members' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Owners' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Admins' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Muts' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Band' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Messages' ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChannelsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof channels ? channels[P] : never
  } 
      : channels


  type channelsCountArgs = 
    Omit<channelsFindManyArgs, 'select' | 'include'> & {
      select?: ChannelsCountAggregateInputType | true
    }

  export interface channelsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Channels that matches the filter.
     * @param {channelsFindUniqueArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends channelsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, channelsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'channels'> extends True ? Prisma__channelsClient<channelsGetPayload<T>> : Prisma__channelsClient<channelsGetPayload<T> | null, null>

    /**
     * Find one Channels that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {channelsFindUniqueOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends channelsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, channelsFindUniqueOrThrowArgs>
    ): Prisma__channelsClient<channelsGetPayload<T>>

    /**
     * Find the first Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindFirstArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends channelsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, channelsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'channels'> extends True ? Prisma__channelsClient<channelsGetPayload<T>> : Prisma__channelsClient<channelsGetPayload<T> | null, null>

    /**
     * Find the first Channels that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindFirstOrThrowArgs} args - Arguments to find a Channels
     * @example
     * // Get one Channels
     * const channels = await prisma.channels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends channelsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, channelsFindFirstOrThrowArgs>
    ): Prisma__channelsClient<channelsGetPayload<T>>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channels.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelsWithIdOnly = await prisma.channels.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends channelsFindManyArgs>(
      args?: SelectSubset<T, channelsFindManyArgs>
    ): Prisma.PrismaPromise<Array<channelsGetPayload<T>>>

    /**
     * Create a Channels.
     * @param {channelsCreateArgs} args - Arguments to create a Channels.
     * @example
     * // Create one Channels
     * const Channels = await prisma.channels.create({
     *   data: {
     *     // ... data to create a Channels
     *   }
     * })
     * 
    **/
    create<T extends channelsCreateArgs>(
      args: SelectSubset<T, channelsCreateArgs>
    ): Prisma__channelsClient<channelsGetPayload<T>>

    /**
     * Create many Channels.
     *     @param {channelsCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channels = await prisma.channels.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends channelsCreateManyArgs>(
      args?: SelectSubset<T, channelsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channels.
     * @param {channelsDeleteArgs} args - Arguments to delete one Channels.
     * @example
     * // Delete one Channels
     * const Channels = await prisma.channels.delete({
     *   where: {
     *     // ... filter to delete one Channels
     *   }
     * })
     * 
    **/
    delete<T extends channelsDeleteArgs>(
      args: SelectSubset<T, channelsDeleteArgs>
    ): Prisma__channelsClient<channelsGetPayload<T>>

    /**
     * Update one Channels.
     * @param {channelsUpdateArgs} args - Arguments to update one Channels.
     * @example
     * // Update one Channels
     * const channels = await prisma.channels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends channelsUpdateArgs>(
      args: SelectSubset<T, channelsUpdateArgs>
    ): Prisma__channelsClient<channelsGetPayload<T>>

    /**
     * Delete zero or more Channels.
     * @param {channelsDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends channelsDeleteManyArgs>(
      args?: SelectSubset<T, channelsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channels = await prisma.channels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends channelsUpdateManyArgs>(
      args: SelectSubset<T, channelsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channels.
     * @param {channelsUpsertArgs} args - Arguments to update or create a Channels.
     * @example
     * // Update or create a Channels
     * const channels = await prisma.channels.upsert({
     *   create: {
     *     // ... data to create a Channels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channels we want to update
     *   }
     * })
    **/
    upsert<T extends channelsUpsertArgs>(
      args: SelectSubset<T, channelsUpsertArgs>
    ): Prisma__channelsClient<channelsGetPayload<T>>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {channelsCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channels.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends channelsCountArgs>(
      args?: Subset<T, channelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelsAggregateArgs>(args: Subset<T, ChannelsAggregateArgs>): Prisma.PrismaPromise<GetChannelsAggregateType<T>>

    /**
     * Group by Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelsGroupByArgs['orderBy'] }
        : { orderBy?: ChannelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for channels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__channelsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Creator<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    Members<T extends channels$MembersArgs= {}>(args?: Subset<T, channels$MembersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Owners<T extends channels$OwnersArgs= {}>(args?: Subset<T, channels$OwnersArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Admins<T extends channels$AdminsArgs= {}>(args?: Subset<T, channels$AdminsArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Muts<T extends channels$MutsArgs= {}>(args?: Subset<T, channels$MutsArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Band<T extends channels$BandArgs= {}>(args?: Subset<T, channels$BandArgs>): Prisma.PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Messages<T extends channels$MessagesArgs= {}>(args?: Subset<T, channels$MessagesArgs>): Prisma.PrismaPromise<Array<MessageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * channels base type for findUnique actions
   */
  export type channelsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * Filter, which channels to fetch.
     */
    where: channelsWhereUniqueInput
  }

  /**
   * channels findUnique
   */
  export interface channelsFindUniqueArgs extends channelsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * channels findUniqueOrThrow
   */
  export type channelsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * Filter, which channels to fetch.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels base type for findFirst actions
   */
  export type channelsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channels.
     */
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }

  /**
   * channels findFirst
   */
  export interface channelsFindFirstArgs extends channelsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * channels findFirstOrThrow
   */
  export type channelsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of channels.
     */
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * channels findMany
   */
  export type channelsFindManyArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * Filter, which channels to fetch.
     */
    where?: channelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of channels to fetch.
     */
    orderBy?: Enumerable<channelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing channels.
     */
    cursor?: channelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` channels.
     */
    skip?: number
    distinct?: Enumerable<ChannelsScalarFieldEnum>
  }


  /**
   * channels create
   */
  export type channelsCreateArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * The data needed to create a channels.
     */
    data: XOR<channelsCreateInput, channelsUncheckedCreateInput>
  }


  /**
   * channels createMany
   */
  export type channelsCreateManyArgs = {
    /**
     * The data used to create many channels.
     */
    data: Enumerable<channelsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * channels update
   */
  export type channelsUpdateArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * The data needed to update a channels.
     */
    data: XOR<channelsUpdateInput, channelsUncheckedUpdateInput>
    /**
     * Choose, which channels to update.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels updateMany
   */
  export type channelsUpdateManyArgs = {
    /**
     * The data used to update channels.
     */
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyInput>
    /**
     * Filter which channels to update
     */
    where?: channelsWhereInput
  }


  /**
   * channels upsert
   */
  export type channelsUpsertArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * The filter to search for the channels to update in case it exists.
     */
    where: channelsWhereUniqueInput
    /**
     * In case the channels found by the `where` argument doesn't exist, create a new channels with this data.
     */
    create: XOR<channelsCreateInput, channelsUncheckedCreateInput>
    /**
     * In case the channels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<channelsUpdateInput, channelsUncheckedUpdateInput>
  }


  /**
   * channels delete
   */
  export type channelsDeleteArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
    /**
     * Filter which channels to delete.
     */
    where: channelsWhereUniqueInput
  }


  /**
   * channels deleteMany
   */
  export type channelsDeleteManyArgs = {
    /**
     * Filter which channels to delete
     */
    where?: channelsWhereInput
  }


  /**
   * channels.Members
   */
  export type channels$MembersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * channels.Owners
   */
  export type channels$OwnersArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * channels.Admins
   */
  export type channels$AdminsArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * channels.Muts
   */
  export type channels$MutsArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * channels.Band
   */
  export type channels$BandArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * channels.Messages
   */
  export type channels$MessagesArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * channels without action
   */
  export type channelsArgs = {
    /**
     * Select specific fields to fetch from the channels
     */
    select?: channelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: channelsInclude | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    fromId: number | null
    toId: number | null
    userId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    fromId: number | null
    toId: number | null
    userId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    fromId: number | null
    fromName: string | null
    toId: number | null
    content: string | null
    createdAt: Date | null
    userId: number | null
    channelsId: string | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    fromId: number | null
    fromName: string | null
    toId: number | null
    content: string | null
    createdAt: Date | null
    userId: number | null
    channelsId: string | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    fromId: number
    fromName: number
    toId: number
    content: number
    createdAt: number
    userId: number
    channelsId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    fromId?: true
    toId?: true
    userId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    fromId?: true
    toId?: true
    userId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    fromId?: true
    fromName?: true
    toId?: true
    content?: true
    createdAt?: true
    userId?: true
    channelsId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    fromId?: true
    fromName?: true
    toId?: true
    content?: true
    createdAt?: true
    userId?: true
    channelsId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    fromId?: true
    fromName?: true
    toId?: true
    content?: true
    createdAt?: true
    userId?: true
    channelsId?: true
    _all?: true
  }

  export type MessageAggregateArgs = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: number
    fromId: number | null
    fromName: string | null
    toId: number | null
    content: string
    createdAt: Date
    userId: number | null
    channelsId: string | null
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect = {
    id?: boolean
    fromId?: boolean
    fromName?: boolean
    toId?: boolean
    content?: boolean
    createdAt?: boolean
    userId?: boolean
    channelsId?: boolean
    User?: boolean | UserArgs
    channels?: boolean | channelsArgs
  }


  export type MessageInclude = {
    User?: boolean | UserArgs
    channels?: boolean | channelsArgs
  }

  export type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Message :
    S extends undefined ? never :
    S extends { include: any } & (MessageArgs | MessageFindManyArgs)
    ? Message  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :
        P extends 'channels' ? channelsGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (MessageArgs | MessageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :
        P extends 'channels' ? channelsGetPayload<S['select'][P]> | null :  P extends keyof Message ? Message[P] : never
  } 
      : Message


  type MessageCountArgs = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? Prisma__MessageClient<MessageGetPayload<T>> : Prisma__MessageClient<MessageGetPayload<T> | null, null>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? Prisma__MessageClient<MessageGetPayload<T>> : Prisma__MessageClient<MessageGetPayload<T> | null, null>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs>(
      args?: SelectSubset<T, MessageFindManyArgs>
    ): Prisma.PrismaPromise<Array<MessageGetPayload<T>>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs>(
      args: SelectSubset<T, MessageCreateArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs>(
      args?: SelectSubset<T, MessageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs>(
      args: SelectSubset<T, MessageDeleteArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs>(
      args: SelectSubset<T, MessageUpdateArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs>(
      args?: SelectSubset<T, MessageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs>(
      args: SelectSubset<T, MessageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs>(
      args: SelectSubset<T, MessageUpsertArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    channels<T extends channelsArgs= {}>(args?: Subset<T, channelsArgs>): Prisma__channelsClient<channelsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Message base type for findUnique actions
   */
  export type MessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUnique
   */
  export interface MessageFindUniqueArgs extends MessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message base type for findFirst actions
   */
  export type MessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * Message findFirst
   */
  export interface MessageFindFirstArgs extends MessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
  }



  /**
   * Model BlockList
   */


  export type AggregateBlockList = {
    _count: BlockListCountAggregateOutputType | null
    _avg: BlockListAvgAggregateOutputType | null
    _sum: BlockListSumAggregateOutputType | null
    _min: BlockListMinAggregateOutputType | null
    _max: BlockListMaxAggregateOutputType | null
  }

  export type BlockListAvgAggregateOutputType = {
    id: number | null
    blockedId: number | null
    userId: number | null
  }

  export type BlockListSumAggregateOutputType = {
    id: number | null
    blockedId: number | null
    userId: number | null
  }

  export type BlockListMinAggregateOutputType = {
    id: number | null
    blockedId: number | null
    userId: number | null
  }

  export type BlockListMaxAggregateOutputType = {
    id: number | null
    blockedId: number | null
    userId: number | null
  }

  export type BlockListCountAggregateOutputType = {
    id: number
    blockedId: number
    userId: number
    _all: number
  }


  export type BlockListAvgAggregateInputType = {
    id?: true
    blockedId?: true
    userId?: true
  }

  export type BlockListSumAggregateInputType = {
    id?: true
    blockedId?: true
    userId?: true
  }

  export type BlockListMinAggregateInputType = {
    id?: true
    blockedId?: true
    userId?: true
  }

  export type BlockListMaxAggregateInputType = {
    id?: true
    blockedId?: true
    userId?: true
  }

  export type BlockListCountAggregateInputType = {
    id?: true
    blockedId?: true
    userId?: true
    _all?: true
  }

  export type BlockListAggregateArgs = {
    /**
     * Filter which BlockList to aggregate.
     */
    where?: BlockListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockLists to fetch.
     */
    orderBy?: Enumerable<BlockListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlockListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BlockLists
    **/
    _count?: true | BlockListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlockListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlockListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockListMaxAggregateInputType
  }

  export type GetBlockListAggregateType<T extends BlockListAggregateArgs> = {
        [P in keyof T & keyof AggregateBlockList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlockList[P]>
      : GetScalarType<T[P], AggregateBlockList[P]>
  }




  export type BlockListGroupByArgs = {
    where?: BlockListWhereInput
    orderBy?: Enumerable<BlockListOrderByWithAggregationInput>
    by: BlockListScalarFieldEnum[]
    having?: BlockListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockListCountAggregateInputType | true
    _avg?: BlockListAvgAggregateInputType
    _sum?: BlockListSumAggregateInputType
    _min?: BlockListMinAggregateInputType
    _max?: BlockListMaxAggregateInputType
  }


  export type BlockListGroupByOutputType = {
    id: number
    blockedId: number
    userId: number | null
    _count: BlockListCountAggregateOutputType | null
    _avg: BlockListAvgAggregateOutputType | null
    _sum: BlockListSumAggregateOutputType | null
    _min: BlockListMinAggregateOutputType | null
    _max: BlockListMaxAggregateOutputType | null
  }

  type GetBlockListGroupByPayload<T extends BlockListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BlockListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockListGroupByOutputType[P]>
            : GetScalarType<T[P], BlockListGroupByOutputType[P]>
        }
      >
    >


  export type BlockListSelect = {
    id?: boolean
    blockedId?: boolean
    userId?: boolean
    User?: boolean | UserArgs
  }


  export type BlockListInclude = {
    User?: boolean | UserArgs
  }

  export type BlockListGetPayload<S extends boolean | null | undefined | BlockListArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BlockList :
    S extends undefined ? never :
    S extends { include: any } & (BlockListArgs | BlockListFindManyArgs)
    ? BlockList  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (BlockListArgs | BlockListFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof BlockList ? BlockList[P] : never
  } 
      : BlockList


  type BlockListCountArgs = 
    Omit<BlockListFindManyArgs, 'select' | 'include'> & {
      select?: BlockListCountAggregateInputType | true
    }

  export interface BlockListDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BlockList that matches the filter.
     * @param {BlockListFindUniqueArgs} args - Arguments to find a BlockList
     * @example
     * // Get one BlockList
     * const blockList = await prisma.blockList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlockListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BlockListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BlockList'> extends True ? Prisma__BlockListClient<BlockListGetPayload<T>> : Prisma__BlockListClient<BlockListGetPayload<T> | null, null>

    /**
     * Find one BlockList that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlockListFindUniqueOrThrowArgs} args - Arguments to find a BlockList
     * @example
     * // Get one BlockList
     * const blockList = await prisma.blockList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlockListFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BlockListFindUniqueOrThrowArgs>
    ): Prisma__BlockListClient<BlockListGetPayload<T>>

    /**
     * Find the first BlockList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListFindFirstArgs} args - Arguments to find a BlockList
     * @example
     * // Get one BlockList
     * const blockList = await prisma.blockList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlockListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BlockListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BlockList'> extends True ? Prisma__BlockListClient<BlockListGetPayload<T>> : Prisma__BlockListClient<BlockListGetPayload<T> | null, null>

    /**
     * Find the first BlockList that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListFindFirstOrThrowArgs} args - Arguments to find a BlockList
     * @example
     * // Get one BlockList
     * const blockList = await prisma.blockList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlockListFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BlockListFindFirstOrThrowArgs>
    ): Prisma__BlockListClient<BlockListGetPayload<T>>

    /**
     * Find zero or more BlockLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BlockLists
     * const blockLists = await prisma.blockList.findMany()
     * 
     * // Get first 10 BlockLists
     * const blockLists = await prisma.blockList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blockListWithIdOnly = await prisma.blockList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlockListFindManyArgs>(
      args?: SelectSubset<T, BlockListFindManyArgs>
    ): Prisma.PrismaPromise<Array<BlockListGetPayload<T>>>

    /**
     * Create a BlockList.
     * @param {BlockListCreateArgs} args - Arguments to create a BlockList.
     * @example
     * // Create one BlockList
     * const BlockList = await prisma.blockList.create({
     *   data: {
     *     // ... data to create a BlockList
     *   }
     * })
     * 
    **/
    create<T extends BlockListCreateArgs>(
      args: SelectSubset<T, BlockListCreateArgs>
    ): Prisma__BlockListClient<BlockListGetPayload<T>>

    /**
     * Create many BlockLists.
     *     @param {BlockListCreateManyArgs} args - Arguments to create many BlockLists.
     *     @example
     *     // Create many BlockLists
     *     const blockList = await prisma.blockList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlockListCreateManyArgs>(
      args?: SelectSubset<T, BlockListCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BlockList.
     * @param {BlockListDeleteArgs} args - Arguments to delete one BlockList.
     * @example
     * // Delete one BlockList
     * const BlockList = await prisma.blockList.delete({
     *   where: {
     *     // ... filter to delete one BlockList
     *   }
     * })
     * 
    **/
    delete<T extends BlockListDeleteArgs>(
      args: SelectSubset<T, BlockListDeleteArgs>
    ): Prisma__BlockListClient<BlockListGetPayload<T>>

    /**
     * Update one BlockList.
     * @param {BlockListUpdateArgs} args - Arguments to update one BlockList.
     * @example
     * // Update one BlockList
     * const blockList = await prisma.blockList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlockListUpdateArgs>(
      args: SelectSubset<T, BlockListUpdateArgs>
    ): Prisma__BlockListClient<BlockListGetPayload<T>>

    /**
     * Delete zero or more BlockLists.
     * @param {BlockListDeleteManyArgs} args - Arguments to filter BlockLists to delete.
     * @example
     * // Delete a few BlockLists
     * const { count } = await prisma.blockList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlockListDeleteManyArgs>(
      args?: SelectSubset<T, BlockListDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BlockLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BlockLists
     * const blockList = await prisma.blockList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlockListUpdateManyArgs>(
      args: SelectSubset<T, BlockListUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BlockList.
     * @param {BlockListUpsertArgs} args - Arguments to update or create a BlockList.
     * @example
     * // Update or create a BlockList
     * const blockList = await prisma.blockList.upsert({
     *   create: {
     *     // ... data to create a BlockList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BlockList we want to update
     *   }
     * })
    **/
    upsert<T extends BlockListUpsertArgs>(
      args: SelectSubset<T, BlockListUpsertArgs>
    ): Prisma__BlockListClient<BlockListGetPayload<T>>

    /**
     * Count the number of BlockLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListCountArgs} args - Arguments to filter BlockLists to count.
     * @example
     * // Count the number of BlockLists
     * const count = await prisma.blockList.count({
     *   where: {
     *     // ... the filter for the BlockLists we want to count
     *   }
     * })
    **/
    count<T extends BlockListCountArgs>(
      args?: Subset<T, BlockListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BlockList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockListAggregateArgs>(args: Subset<T, BlockListAggregateArgs>): Prisma.PrismaPromise<GetBlockListAggregateType<T>>

    /**
     * Group by BlockList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockListGroupByArgs['orderBy'] }
        : { orderBy?: BlockListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BlockList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BlockListClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    User<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BlockList base type for findUnique actions
   */
  export type BlockListFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * Filter, which BlockList to fetch.
     */
    where: BlockListWhereUniqueInput
  }

  /**
   * BlockList findUnique
   */
  export interface BlockListFindUniqueArgs extends BlockListFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlockList findUniqueOrThrow
   */
  export type BlockListFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * Filter, which BlockList to fetch.
     */
    where: BlockListWhereUniqueInput
  }


  /**
   * BlockList base type for findFirst actions
   */
  export type BlockListFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * Filter, which BlockList to fetch.
     */
    where?: BlockListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockLists to fetch.
     */
    orderBy?: Enumerable<BlockListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockLists.
     */
    cursor?: BlockListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockLists.
     */
    distinct?: Enumerable<BlockListScalarFieldEnum>
  }

  /**
   * BlockList findFirst
   */
  export interface BlockListFindFirstArgs extends BlockListFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BlockList findFirstOrThrow
   */
  export type BlockListFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * Filter, which BlockList to fetch.
     */
    where?: BlockListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockLists to fetch.
     */
    orderBy?: Enumerable<BlockListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BlockLists.
     */
    cursor?: BlockListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BlockLists.
     */
    distinct?: Enumerable<BlockListScalarFieldEnum>
  }


  /**
   * BlockList findMany
   */
  export type BlockListFindManyArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * Filter, which BlockLists to fetch.
     */
    where?: BlockListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BlockLists to fetch.
     */
    orderBy?: Enumerable<BlockListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BlockLists.
     */
    cursor?: BlockListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BlockLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BlockLists.
     */
    skip?: number
    distinct?: Enumerable<BlockListScalarFieldEnum>
  }


  /**
   * BlockList create
   */
  export type BlockListCreateArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * The data needed to create a BlockList.
     */
    data: XOR<BlockListCreateInput, BlockListUncheckedCreateInput>
  }


  /**
   * BlockList createMany
   */
  export type BlockListCreateManyArgs = {
    /**
     * The data used to create many BlockLists.
     */
    data: Enumerable<BlockListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BlockList update
   */
  export type BlockListUpdateArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * The data needed to update a BlockList.
     */
    data: XOR<BlockListUpdateInput, BlockListUncheckedUpdateInput>
    /**
     * Choose, which BlockList to update.
     */
    where: BlockListWhereUniqueInput
  }


  /**
   * BlockList updateMany
   */
  export type BlockListUpdateManyArgs = {
    /**
     * The data used to update BlockLists.
     */
    data: XOR<BlockListUpdateManyMutationInput, BlockListUncheckedUpdateManyInput>
    /**
     * Filter which BlockLists to update
     */
    where?: BlockListWhereInput
  }


  /**
   * BlockList upsert
   */
  export type BlockListUpsertArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * The filter to search for the BlockList to update in case it exists.
     */
    where: BlockListWhereUniqueInput
    /**
     * In case the BlockList found by the `where` argument doesn't exist, create a new BlockList with this data.
     */
    create: XOR<BlockListCreateInput, BlockListUncheckedCreateInput>
    /**
     * In case the BlockList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlockListUpdateInput, BlockListUncheckedUpdateInput>
  }


  /**
   * BlockList delete
   */
  export type BlockListDeleteArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
    /**
     * Filter which BlockList to delete.
     */
    where: BlockListWhereUniqueInput
  }


  /**
   * BlockList deleteMany
   */
  export type BlockListDeleteManyArgs = {
    /**
     * Filter which BlockLists to delete
     */
    where?: BlockListWhereInput
  }


  /**
   * BlockList without action
   */
  export type BlockListArgs = {
    /**
     * Select specific fields to fetch from the BlockList
     */
    select?: BlockListSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockListInclude | null
  }



  /**
   * Enums
   */

  export const BlockListScalarFieldEnum: {
    id: 'id',
    blockedId: 'blockedId',
    userId: 'userId'
  };

  export type BlockListScalarFieldEnum = (typeof BlockListScalarFieldEnum)[keyof typeof BlockListScalarFieldEnum]


  export const ChannelsScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    password: 'password',
    accessPassword: 'accessPassword',
    userId: 'userId',
    avatar: 'avatar',
    accessIsActived: 'accessIsActived'
  };

  export type ChannelsScalarFieldEnum = (typeof ChannelsScalarFieldEnum)[keyof typeof ChannelsScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    fromId: 'fromId',
    fromName: 'fromName',
    toId: 'toId',
    content: 'content',
    createdAt: 'createdAt',
    userId: 'userId',
    channelsId: 'channelsId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    username: 'username',
    status: 'status',
    lastMessage: 'lastMessage',
    lastMessageTime: 'lastMessageTime',
    avatar: 'avatar',
    background: 'background',
    gaemePlayed: 'gaemePlayed',
    win: 'win',
    lose: 'lose',
    points: 'points',
    level: 'level'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    id42: 'id42',
    email: 'email',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    id42?: IntNullableFilter | number | null
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    dmMessages?: MessageListRelationFilter
    BlockList?: BlockListListRelationFilter
    channels?: ChannelsListRelationFilter
    channelsOwner?: ChannelsListRelationFilter
    channelsAdmin?: ChannelsListRelationFilter
    channelsMember?: ChannelsListRelationFilter
    channelsMuts?: ChannelsListRelationFilter
    channelsBand?: ChannelsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    id42?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    dmMessages?: MessageOrderByRelationAggregateInput
    BlockList?: BlockListOrderByRelationAggregateInput
    channels?: channelsOrderByRelationAggregateInput
    channelsOwner?: channelsOrderByRelationAggregateInput
    channelsAdmin?: channelsOrderByRelationAggregateInput
    channelsMember?: channelsOrderByRelationAggregateInput
    channelsMuts?: channelsOrderByRelationAggregateInput
    channelsBand?: channelsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    username?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    id42?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id42?: IntNullableWithAggregatesFilter | number | null
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    userId?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    username?: StringFilter | string
    status?: StringFilter | string
    lastMessage?: StringNullableFilter | string | null
    lastMessageTime?: DateTimeNullableFilter | Date | string | null
    avatar?: StringNullableFilter | string | null
    background?: StringNullableFilter | string | null
    gaemePlayed?: IntFilter | number
    win?: IntFilter | number
    lose?: IntFilter | number
    points?: IntFilter | number
    level?: FloatFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    status?: SortOrder
    lastMessage?: SortOrder
    lastMessageTime?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = {
    userId?: number
  }

  export type ProfileOrderByWithAggregationInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    status?: SortOrder
    lastMessage?: SortOrder
    lastMessageTime?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    lastMessage?: StringNullableWithAggregatesFilter | string | null
    lastMessageTime?: DateTimeNullableWithAggregatesFilter | Date | string | null
    avatar?: StringNullableWithAggregatesFilter | string | null
    background?: StringNullableWithAggregatesFilter | string | null
    gaemePlayed?: IntWithAggregatesFilter | number
    win?: IntWithAggregatesFilter | number
    lose?: IntWithAggregatesFilter | number
    points?: IntWithAggregatesFilter | number
    level?: FloatWithAggregatesFilter | number
  }

  export type channelsWhereInput = {
    AND?: Enumerable<channelsWhereInput>
    OR?: Enumerable<channelsWhereInput>
    NOT?: Enumerable<channelsWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    name?: StringFilter | string
    password?: StringNullableFilter | string | null
    accessPassword?: StringNullableFilter | string | null
    userId?: IntNullableFilter | number | null
    avatar?: StringNullableFilter | string | null
    accessIsActived?: BoolFilter | boolean
    Creator?: XOR<UserRelationFilter, UserWhereInput> | null
    Members?: UserListRelationFilter
    Owners?: UserListRelationFilter
    Admins?: UserListRelationFilter
    Muts?: UserListRelationFilter
    Band?: UserListRelationFilter
    Messages?: MessageListRelationFilter
  }

  export type channelsOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    password?: SortOrder
    accessPassword?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    accessIsActived?: SortOrder
    Creator?: UserOrderByWithRelationInput
    Members?: UserOrderByRelationAggregateInput
    Owners?: UserOrderByRelationAggregateInput
    Admins?: UserOrderByRelationAggregateInput
    Muts?: UserOrderByRelationAggregateInput
    Band?: UserOrderByRelationAggregateInput
    Messages?: MessageOrderByRelationAggregateInput
  }

  export type channelsWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type channelsOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    password?: SortOrder
    accessPassword?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    accessIsActived?: SortOrder
    _count?: channelsCountOrderByAggregateInput
    _avg?: channelsAvgOrderByAggregateInput
    _max?: channelsMaxOrderByAggregateInput
    _min?: channelsMinOrderByAggregateInput
    _sum?: channelsSumOrderByAggregateInput
  }

  export type channelsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<channelsScalarWhereWithAggregatesInput>
    OR?: Enumerable<channelsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<channelsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    accessPassword?: StringNullableWithAggregatesFilter | string | null
    userId?: IntNullableWithAggregatesFilter | number | null
    avatar?: StringNullableWithAggregatesFilter | string | null
    accessIsActived?: BoolWithAggregatesFilter | boolean
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    id?: IntFilter | number
    fromId?: IntNullableFilter | number | null
    fromName?: StringNullableFilter | string | null
    toId?: IntNullableFilter | number | null
    content?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    userId?: IntNullableFilter | number | null
    channelsId?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
    channels?: XOR<ChannelsRelationFilter, channelsWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    fromId?: SortOrder
    fromName?: SortOrder
    toId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    channelsId?: SortOrder
    User?: UserOrderByWithRelationInput
    channels?: channelsOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = {
    id?: number
  }

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    fromId?: SortOrder
    fromName?: SortOrder
    toId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    channelsId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fromId?: IntNullableWithAggregatesFilter | number | null
    fromName?: StringNullableWithAggregatesFilter | string | null
    toId?: IntNullableWithAggregatesFilter | number | null
    content?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: IntNullableWithAggregatesFilter | number | null
    channelsId?: StringNullableWithAggregatesFilter | string | null
  }

  export type BlockListWhereInput = {
    AND?: Enumerable<BlockListWhereInput>
    OR?: Enumerable<BlockListWhereInput>
    NOT?: Enumerable<BlockListWhereInput>
    id?: IntFilter | number
    blockedId?: IntFilter | number
    userId?: IntNullableFilter | number | null
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type BlockListOrderByWithRelationInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type BlockListWhereUniqueInput = {
    id?: number
  }

  export type BlockListOrderByWithAggregationInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
    _count?: BlockListCountOrderByAggregateInput
    _avg?: BlockListAvgOrderByAggregateInput
    _max?: BlockListMaxOrderByAggregateInput
    _min?: BlockListMinOrderByAggregateInput
    _sum?: BlockListSumOrderByAggregateInput
  }

  export type BlockListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BlockListScalarWhereWithAggregatesInput>
    OR?: Enumerable<BlockListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BlockListScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    blockedId?: IntWithAggregatesFilter | number
    userId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserUpdateInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateInput = {
    firstName: string
    lastName: string
    email: string
    username: string
    status?: string
    lastMessage?: string | null
    lastMessageTime?: Date | string | null
    avatar?: string | null
    background?: string | null
    gaemePlayed?: number
    win?: number
    lose?: number
    points?: number
    level?: number
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    userId: number
    firstName: string
    lastName: string
    email: string
    username: string
    status?: string
    lastMessage?: string | null
    lastMessageTime?: Date | string | null
    avatar?: string | null
    background?: string | null
    gaemePlayed?: number
    win?: number
    lose?: number
    points?: number
    level?: number
  }

  export type ProfileUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    gaemePlayed?: IntFieldUpdateOperationsInput | number
    win?: IntFieldUpdateOperationsInput | number
    lose?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    level?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    gaemePlayed?: IntFieldUpdateOperationsInput | number
    win?: IntFieldUpdateOperationsInput | number
    lose?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    level?: FloatFieldUpdateOperationsInput | number
  }

  export type ProfileCreateManyInput = {
    userId: number
    firstName: string
    lastName: string
    email: string
    username: string
    status?: string
    lastMessage?: string | null
    lastMessageTime?: Date | string | null
    avatar?: string | null
    background?: string | null
    gaemePlayed?: number
    win?: number
    lose?: number
    points?: number
    level?: number
  }

  export type ProfileUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    gaemePlayed?: IntFieldUpdateOperationsInput | number
    win?: IntFieldUpdateOperationsInput | number
    lose?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    level?: FloatFieldUpdateOperationsInput | number
  }

  export type ProfileUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    gaemePlayed?: IntFieldUpdateOperationsInput | number
    win?: IntFieldUpdateOperationsInput | number
    lose?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    level?: FloatFieldUpdateOperationsInput | number
  }

  export type channelsCreateInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsCreateManyInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
  }

  export type channelsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type channelsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateInput = {
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    User?: UserCreateNestedOneWithoutDmMessagesInput
    channels?: channelsCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    userId?: number | null
    channelsId?: string | null
  }

  export type MessageUpdateInput = {
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutDmMessagesNestedInput
    channels?: channelsUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    channelsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyInput = {
    id?: number
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    userId?: number | null
    channelsId?: string | null
  }

  export type MessageUpdateManyMutationInput = {
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    channelsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlockListCreateInput = {
    blockedId: number
    User?: UserCreateNestedOneWithoutBlockListInput
  }

  export type BlockListUncheckedCreateInput = {
    id?: number
    blockedId: number
    userId?: number | null
  }

  export type BlockListUpdateInput = {
    blockedId?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneWithoutBlockListNestedInput
  }

  export type BlockListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BlockListCreateManyInput = {
    id?: number
    blockedId: number
    userId?: number | null
  }

  export type BlockListUpdateManyMutationInput = {
    blockedId?: IntFieldUpdateOperationsInput | number
  }

  export type BlockListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type BlockListListRelationFilter = {
    every?: BlockListWhereInput
    some?: BlockListWhereInput
    none?: BlockListWhereInput
  }

  export type ChannelsListRelationFilter = {
    every?: channelsWhereInput
    some?: channelsWhereInput
    none?: channelsWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type channelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    id42?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    id42?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    id42?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    id42?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    id42?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    status?: SortOrder
    lastMessage?: SortOrder
    lastMessageTime?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    userId?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    status?: SortOrder
    lastMessage?: SortOrder
    lastMessageTime?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    status?: SortOrder
    lastMessage?: SortOrder
    lastMessageTime?: SortOrder
    avatar?: SortOrder
    background?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    userId?: SortOrder
    gaemePlayed?: SortOrder
    win?: SortOrder
    lose?: SortOrder
    points?: SortOrder
    level?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type channelsCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    password?: SortOrder
    accessPassword?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    accessIsActived?: SortOrder
  }

  export type channelsAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type channelsMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    password?: SortOrder
    accessPassword?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    accessIsActived?: SortOrder
  }

  export type channelsMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    password?: SortOrder
    accessPassword?: SortOrder
    userId?: SortOrder
    avatar?: SortOrder
    accessIsActived?: SortOrder
  }

  export type channelsSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ChannelsRelationFilter = {
    is?: channelsWhereInput | null
    isNot?: channelsWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    fromName?: SortOrder
    toId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    channelsId?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    userId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    fromName?: SortOrder
    toId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    channelsId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    fromName?: SortOrder
    toId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    channelsId?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BlockListCountOrderByAggregateInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
  }

  export type BlockListAvgOrderByAggregateInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
  }

  export type BlockListMaxOrderByAggregateInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
  }

  export type BlockListMinOrderByAggregateInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
  }

  export type BlockListSumOrderByAggregateInput = {
    id?: SortOrder
    blockedId?: SortOrder
    userId?: SortOrder
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessageCreateWithoutUserInput>, Enumerable<MessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutUserInput>
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type BlockListCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BlockListCreateWithoutUserInput>, Enumerable<BlockListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockListCreateOrConnectWithoutUserInput>
    createMany?: BlockListCreateManyUserInputEnvelope
    connect?: Enumerable<BlockListWhereUniqueInput>
  }

  export type channelsCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<channelsCreateWithoutCreatorInput>, Enumerable<channelsUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutCreatorInput>
    createMany?: channelsCreateManyCreatorInputEnvelope
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsCreateNestedManyWithoutOwnersInput = {
    create?: XOR<Enumerable<channelsCreateWithoutOwnersInput>, Enumerable<channelsUncheckedCreateWithoutOwnersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutOwnersInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsCreateNestedManyWithoutAdminsInput = {
    create?: XOR<Enumerable<channelsCreateWithoutAdminsInput>, Enumerable<channelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutAdminsInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMembersInput>, Enumerable<channelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsCreateNestedManyWithoutMutsInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMutsInput>, Enumerable<channelsUncheckedCreateWithoutMutsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMutsInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsCreateNestedManyWithoutBandInput = {
    create?: XOR<Enumerable<channelsCreateWithoutBandInput>, Enumerable<channelsUncheckedCreateWithoutBandInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutBandInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type MessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MessageCreateWithoutUserInput>, Enumerable<MessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutUserInput>
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type BlockListUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BlockListCreateWithoutUserInput>, Enumerable<BlockListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockListCreateOrConnectWithoutUserInput>
    createMany?: BlockListCreateManyUserInputEnvelope
    connect?: Enumerable<BlockListWhereUniqueInput>
  }

  export type channelsUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<channelsCreateWithoutCreatorInput>, Enumerable<channelsUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutCreatorInput>
    createMany?: channelsCreateManyCreatorInputEnvelope
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsUncheckedCreateNestedManyWithoutOwnersInput = {
    create?: XOR<Enumerable<channelsCreateWithoutOwnersInput>, Enumerable<channelsUncheckedCreateWithoutOwnersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutOwnersInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsUncheckedCreateNestedManyWithoutAdminsInput = {
    create?: XOR<Enumerable<channelsCreateWithoutAdminsInput>, Enumerable<channelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutAdminsInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMembersInput>, Enumerable<channelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsUncheckedCreateNestedManyWithoutMutsInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMutsInput>, Enumerable<channelsUncheckedCreateWithoutMutsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMutsInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type channelsUncheckedCreateNestedManyWithoutBandInput = {
    create?: XOR<Enumerable<channelsCreateWithoutBandInput>, Enumerable<channelsUncheckedCreateWithoutBandInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutBandInput>
    connect?: Enumerable<channelsWhereUniqueInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutUserInput>, Enumerable<MessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessageCreateManyUserInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type BlockListUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BlockListCreateWithoutUserInput>, Enumerable<BlockListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockListCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BlockListUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BlockListCreateManyUserInputEnvelope
    set?: Enumerable<BlockListWhereUniqueInput>
    disconnect?: Enumerable<BlockListWhereUniqueInput>
    delete?: Enumerable<BlockListWhereUniqueInput>
    connect?: Enumerable<BlockListWhereUniqueInput>
    update?: Enumerable<BlockListUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BlockListUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BlockListScalarWhereInput>
  }

  export type channelsUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutCreatorInput>, Enumerable<channelsUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: channelsCreateManyCreatorInputEnvelope
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUpdateManyWithoutOwnersNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutOwnersInput>, Enumerable<channelsUncheckedCreateWithoutOwnersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutOwnersInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutOwnersInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutOwnersInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutOwnersInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutAdminsInput>, Enumerable<channelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutAdminsInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutAdminsInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutAdminsInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutAdminsInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMembersInput>, Enumerable<channelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUpdateManyWithoutMutsNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMutsInput>, Enumerable<channelsUncheckedCreateWithoutMutsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMutsInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutMutsInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutMutsInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutMutsInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUpdateManyWithoutBandNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutBandInput>, Enumerable<channelsUncheckedCreateWithoutBandInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutBandInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutBandInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutBandInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutBandInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type MessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutUserInput>, Enumerable<MessageUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MessageCreateManyUserInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type BlockListUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BlockListCreateWithoutUserInput>, Enumerable<BlockListUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BlockListCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BlockListUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BlockListCreateManyUserInputEnvelope
    set?: Enumerable<BlockListWhereUniqueInput>
    disconnect?: Enumerable<BlockListWhereUniqueInput>
    delete?: Enumerable<BlockListWhereUniqueInput>
    connect?: Enumerable<BlockListWhereUniqueInput>
    update?: Enumerable<BlockListUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BlockListUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BlockListScalarWhereInput>
  }

  export type channelsUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutCreatorInput>, Enumerable<channelsUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: channelsCreateManyCreatorInputEnvelope
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUncheckedUpdateManyWithoutOwnersNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutOwnersInput>, Enumerable<channelsUncheckedCreateWithoutOwnersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutOwnersInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutOwnersInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutOwnersInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutOwnersInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUncheckedUpdateManyWithoutAdminsNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutAdminsInput>, Enumerable<channelsUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutAdminsInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutAdminsInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutAdminsInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutAdminsInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMembersInput>, Enumerable<channelsUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUncheckedUpdateManyWithoutMutsNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutMutsInput>, Enumerable<channelsUncheckedCreateWithoutMutsInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutMutsInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutMutsInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutMutsInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutMutsInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type channelsUncheckedUpdateManyWithoutBandNestedInput = {
    create?: XOR<Enumerable<channelsCreateWithoutBandInput>, Enumerable<channelsUncheckedCreateWithoutBandInput>>
    connectOrCreate?: Enumerable<channelsCreateOrConnectWithoutBandInput>
    upsert?: Enumerable<channelsUpsertWithWhereUniqueWithoutBandInput>
    set?: Enumerable<channelsWhereUniqueInput>
    disconnect?: Enumerable<channelsWhereUniqueInput>
    delete?: Enumerable<channelsWhereUniqueInput>
    connect?: Enumerable<channelsWhereUniqueInput>
    update?: Enumerable<channelsUpdateWithWhereUniqueWithoutBandInput>
    updateMany?: Enumerable<channelsUpdateManyWithWhereWithoutBandInput>
    deleteMany?: Enumerable<channelsScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutChannelsInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutChannelsMemberInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMemberInput>, Enumerable<UserUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMemberInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutChannelsOwnerInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsOwnerInput>, Enumerable<UserUncheckedCreateWithoutChannelsOwnerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsOwnerInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutChannelsAdminInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsAdminInput>, Enumerable<UserUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsAdminInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutChannelsMutsInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMutsInput>, Enumerable<UserUncheckedCreateWithoutChannelsMutsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMutsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutChannelsBandInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsBandInput>, Enumerable<UserUncheckedCreateWithoutChannelsBandInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsBandInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type MessageCreateNestedManyWithoutChannelsInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelsInput>, Enumerable<MessageUncheckedCreateWithoutChannelsInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelsInput>
    createMany?: MessageCreateManyChannelsInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutChannelsMemberInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMemberInput>, Enumerable<UserUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMemberInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutChannelsOwnerInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsOwnerInput>, Enumerable<UserUncheckedCreateWithoutChannelsOwnerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsOwnerInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutChannelsAdminInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsAdminInput>, Enumerable<UserUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsAdminInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutChannelsMutsInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMutsInput>, Enumerable<UserUncheckedCreateWithoutChannelsMutsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMutsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutChannelsBandInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsBandInput>, Enumerable<UserUncheckedCreateWithoutChannelsBandInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsBandInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutChannelsInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelsInput>, Enumerable<MessageUncheckedCreateWithoutChannelsInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelsInput>
    createMany?: MessageCreateManyChannelsInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneWithoutChannelsNestedInput = {
    create?: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelsInput
    upsert?: UserUpsertWithoutChannelsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
  }

  export type UserUpdateManyWithoutChannelsMemberNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMemberInput>, Enumerable<UserUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMemberInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsMemberInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsMemberInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsMemberInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutChannelsOwnerNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsOwnerInput>, Enumerable<UserUncheckedCreateWithoutChannelsOwnerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsOwnerInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsOwnerInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsOwnerInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsOwnerInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutChannelsAdminNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsAdminInput>, Enumerable<UserUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsAdminInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsAdminInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsAdminInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsAdminInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutChannelsMutsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMutsInput>, Enumerable<UserUncheckedCreateWithoutChannelsMutsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMutsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsMutsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsMutsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsMutsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutChannelsBandNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsBandInput>, Enumerable<UserUncheckedCreateWithoutChannelsBandInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsBandInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsBandInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsBandInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsBandInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type MessageUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelsInput>, Enumerable<MessageUncheckedCreateWithoutChannelsInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelsInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChannelsInput>
    createMany?: MessageCreateManyChannelsInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChannelsInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChannelsInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutChannelsMemberNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMemberInput>, Enumerable<UserUncheckedCreateWithoutChannelsMemberInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMemberInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsMemberInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsMemberInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsMemberInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsOwnerInput>, Enumerable<UserUncheckedCreateWithoutChannelsOwnerInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsOwnerInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsOwnerInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsOwnerInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsOwnerInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutChannelsAdminNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsAdminInput>, Enumerable<UserUncheckedCreateWithoutChannelsAdminInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsAdminInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsAdminInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsAdminInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsAdminInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutChannelsMutsNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsMutsInput>, Enumerable<UserUncheckedCreateWithoutChannelsMutsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsMutsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsMutsInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsMutsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsMutsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutChannelsBandNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutChannelsBandInput>, Enumerable<UserUncheckedCreateWithoutChannelsBandInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutChannelsBandInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutChannelsBandInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutChannelsBandInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutChannelsBandInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutChannelsNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChannelsInput>, Enumerable<MessageUncheckedCreateWithoutChannelsInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChannelsInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChannelsInput>
    createMany?: MessageCreateManyChannelsInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChannelsInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChannelsInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutDmMessagesInput = {
    create?: XOR<UserCreateWithoutDmMessagesInput, UserUncheckedCreateWithoutDmMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDmMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type channelsCreateNestedOneWithoutMessagesInput = {
    create?: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: channelsCreateOrConnectWithoutMessagesInput
    connect?: channelsWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutDmMessagesNestedInput = {
    create?: XOR<UserCreateWithoutDmMessagesInput, UserUncheckedCreateWithoutDmMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutDmMessagesInput
    upsert?: UserUpsertWithoutDmMessagesInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutDmMessagesInput, UserUncheckedUpdateWithoutDmMessagesInput>
  }

  export type channelsUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: channelsCreateOrConnectWithoutMessagesInput
    upsert?: channelsUpsertWithoutMessagesInput
    disconnect?: boolean
    delete?: boolean
    connect?: channelsWhereUniqueInput
    update?: XOR<channelsUpdateWithoutMessagesInput, channelsUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutBlockListInput = {
    create?: XOR<UserCreateWithoutBlockListInput, UserUncheckedCreateWithoutBlockListInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockListInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutBlockListNestedInput = {
    create?: XOR<UserCreateWithoutBlockListInput, UserUncheckedCreateWithoutBlockListInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockListInput
    upsert?: UserUpsertWithoutBlockListInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBlockListInput, UserUncheckedUpdateWithoutBlockListInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ProfileCreateWithoutUserInput = {
    firstName: string
    lastName: string
    email: string
    username: string
    status?: string
    lastMessage?: string | null
    lastMessageTime?: Date | string | null
    avatar?: string | null
    background?: string | null
    gaemePlayed?: number
    win?: number
    lose?: number
    points?: number
    level?: number
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    firstName: string
    lastName: string
    email: string
    username: string
    status?: string
    lastMessage?: string | null
    lastMessageTime?: Date | string | null
    avatar?: string | null
    background?: string | null
    gaemePlayed?: number
    win?: number
    lose?: number
    points?: number
    level?: number
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateWithoutUserInput = {
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    channels?: channelsCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutUserInput = {
    id?: number
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    channelsId?: string | null
  }

  export type MessageCreateOrConnectWithoutUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateManyUserInputEnvelope = {
    data: Enumerable<MessageCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BlockListCreateWithoutUserInput = {
    blockedId: number
  }

  export type BlockListUncheckedCreateWithoutUserInput = {
    id?: number
    blockedId: number
  }

  export type BlockListCreateOrConnectWithoutUserInput = {
    where: BlockListWhereUniqueInput
    create: XOR<BlockListCreateWithoutUserInput, BlockListUncheckedCreateWithoutUserInput>
  }

  export type BlockListCreateManyUserInputEnvelope = {
    data: Enumerable<BlockListCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type channelsCreateWithoutCreatorInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutCreatorInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutCreatorInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutCreatorInput, channelsUncheckedCreateWithoutCreatorInput>
  }

  export type channelsCreateManyCreatorInputEnvelope = {
    data: Enumerable<channelsCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type channelsCreateWithoutOwnersInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutOwnersInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutOwnersInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutOwnersInput, channelsUncheckedCreateWithoutOwnersInput>
  }

  export type channelsCreateWithoutAdminsInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutAdminsInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutAdminsInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutAdminsInput, channelsUncheckedCreateWithoutAdminsInput>
  }

  export type channelsCreateWithoutMembersInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutMembersInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutMembersInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutMembersInput, channelsUncheckedCreateWithoutMembersInput>
  }

  export type channelsCreateWithoutMutsInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutMutsInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutMutsInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutMutsInput, channelsUncheckedCreateWithoutMutsInput>
  }

  export type channelsCreateWithoutBandInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Messages?: MessageCreateNestedManyWithoutChannelsInput
  }

  export type channelsUncheckedCreateWithoutBandInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Messages?: MessageUncheckedCreateNestedManyWithoutChannelsInput
  }

  export type channelsCreateOrConnectWithoutBandInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutBandInput, channelsUncheckedCreateWithoutBandInput>
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    gaemePlayed?: IntFieldUpdateOperationsInput | number
    win?: IntFieldUpdateOperationsInput | number
    lose?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    level?: FloatFieldUpdateOperationsInput | number
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    background?: NullableStringFieldUpdateOperationsInput | string | null
    gaemePlayed?: IntFieldUpdateOperationsInput | number
    win?: IntFieldUpdateOperationsInput | number
    lose?: IntFieldUpdateOperationsInput | number
    points?: IntFieldUpdateOperationsInput | number
    level?: FloatFieldUpdateOperationsInput | number
  }

  export type MessageUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutDmMessagesInput>
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    id?: IntFilter | number
    fromId?: IntNullableFilter | number | null
    fromName?: StringNullableFilter | string | null
    toId?: IntNullableFilter | number | null
    content?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    userId?: IntNullableFilter | number | null
    channelsId?: StringNullableFilter | string | null
  }

  export type BlockListUpsertWithWhereUniqueWithoutUserInput = {
    where: BlockListWhereUniqueInput
    update: XOR<BlockListUpdateWithoutUserInput, BlockListUncheckedUpdateWithoutUserInput>
    create: XOR<BlockListCreateWithoutUserInput, BlockListUncheckedCreateWithoutUserInput>
  }

  export type BlockListUpdateWithWhereUniqueWithoutUserInput = {
    where: BlockListWhereUniqueInput
    data: XOR<BlockListUpdateWithoutUserInput, BlockListUncheckedUpdateWithoutUserInput>
  }

  export type BlockListUpdateManyWithWhereWithoutUserInput = {
    where: BlockListScalarWhereInput
    data: XOR<BlockListUpdateManyMutationInput, BlockListUncheckedUpdateManyWithoutBlockListInput>
  }

  export type BlockListScalarWhereInput = {
    AND?: Enumerable<BlockListScalarWhereInput>
    OR?: Enumerable<BlockListScalarWhereInput>
    NOT?: Enumerable<BlockListScalarWhereInput>
    id?: IntFilter | number
    blockedId?: IntFilter | number
    userId?: IntNullableFilter | number | null
  }

  export type channelsUpsertWithWhereUniqueWithoutCreatorInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutCreatorInput, channelsUncheckedUpdateWithoutCreatorInput>
    create: XOR<channelsCreateWithoutCreatorInput, channelsUncheckedCreateWithoutCreatorInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutCreatorInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutCreatorInput, channelsUncheckedUpdateWithoutCreatorInput>
  }

  export type channelsUpdateManyWithWhereWithoutCreatorInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutChannelsInput>
  }

  export type channelsScalarWhereInput = {
    AND?: Enumerable<channelsScalarWhereInput>
    OR?: Enumerable<channelsScalarWhereInput>
    NOT?: Enumerable<channelsScalarWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    name?: StringFilter | string
    password?: StringNullableFilter | string | null
    accessPassword?: StringNullableFilter | string | null
    userId?: IntNullableFilter | number | null
    avatar?: StringNullableFilter | string | null
    accessIsActived?: BoolFilter | boolean
  }

  export type channelsUpsertWithWhereUniqueWithoutOwnersInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutOwnersInput, channelsUncheckedUpdateWithoutOwnersInput>
    create: XOR<channelsCreateWithoutOwnersInput, channelsUncheckedCreateWithoutOwnersInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutOwnersInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutOwnersInput, channelsUncheckedUpdateWithoutOwnersInput>
  }

  export type channelsUpdateManyWithWhereWithoutOwnersInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutChannelsOwnerInput>
  }

  export type channelsUpsertWithWhereUniqueWithoutAdminsInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutAdminsInput, channelsUncheckedUpdateWithoutAdminsInput>
    create: XOR<channelsCreateWithoutAdminsInput, channelsUncheckedCreateWithoutAdminsInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutAdminsInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutAdminsInput, channelsUncheckedUpdateWithoutAdminsInput>
  }

  export type channelsUpdateManyWithWhereWithoutAdminsInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutChannelsAdminInput>
  }

  export type channelsUpsertWithWhereUniqueWithoutMembersInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutMembersInput, channelsUncheckedUpdateWithoutMembersInput>
    create: XOR<channelsCreateWithoutMembersInput, channelsUncheckedCreateWithoutMembersInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutMembersInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutMembersInput, channelsUncheckedUpdateWithoutMembersInput>
  }

  export type channelsUpdateManyWithWhereWithoutMembersInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutChannelsMemberInput>
  }

  export type channelsUpsertWithWhereUniqueWithoutMutsInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutMutsInput, channelsUncheckedUpdateWithoutMutsInput>
    create: XOR<channelsCreateWithoutMutsInput, channelsUncheckedCreateWithoutMutsInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutMutsInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutMutsInput, channelsUncheckedUpdateWithoutMutsInput>
  }

  export type channelsUpdateManyWithWhereWithoutMutsInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutChannelsMutsInput>
  }

  export type channelsUpsertWithWhereUniqueWithoutBandInput = {
    where: channelsWhereUniqueInput
    update: XOR<channelsUpdateWithoutBandInput, channelsUncheckedUpdateWithoutBandInput>
    create: XOR<channelsCreateWithoutBandInput, channelsUncheckedCreateWithoutBandInput>
  }

  export type channelsUpdateWithWhereUniqueWithoutBandInput = {
    where: channelsWhereUniqueInput
    data: XOR<channelsUpdateWithoutBandInput, channelsUncheckedUpdateWithoutBandInput>
  }

  export type channelsUpdateManyWithWhereWithoutBandInput = {
    where: channelsScalarWhereInput
    data: XOR<channelsUpdateManyMutationInput, channelsUncheckedUpdateManyWithoutChannelsBandInput>
  }

  export type UserCreateWithoutProfileInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserCreateWithoutChannelsInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutChannelsInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutChannelsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
  }

  export type UserCreateWithoutChannelsMemberInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutChannelsMemberInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutChannelsMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsMemberInput, UserUncheckedCreateWithoutChannelsMemberInput>
  }

  export type UserCreateWithoutChannelsOwnerInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutChannelsOwnerInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutChannelsOwnerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsOwnerInput, UserUncheckedCreateWithoutChannelsOwnerInput>
  }

  export type UserCreateWithoutChannelsAdminInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutChannelsAdminInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutChannelsAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsAdminInput, UserUncheckedCreateWithoutChannelsAdminInput>
  }

  export type UserCreateWithoutChannelsMutsInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutChannelsMutsInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutChannelsMutsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsMutsInput, UserUncheckedCreateWithoutChannelsMutsInput>
  }

  export type UserCreateWithoutChannelsBandInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
  }

  export type UserUncheckedCreateWithoutChannelsBandInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
  }

  export type UserCreateOrConnectWithoutChannelsBandInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelsBandInput, UserUncheckedCreateWithoutChannelsBandInput>
  }

  export type MessageCreateWithoutChannelsInput = {
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    User?: UserCreateNestedOneWithoutDmMessagesInput
  }

  export type MessageUncheckedCreateWithoutChannelsInput = {
    id?: number
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    userId?: number | null
  }

  export type MessageCreateOrConnectWithoutChannelsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChannelsInput, MessageUncheckedCreateWithoutChannelsInput>
  }

  export type MessageCreateManyChannelsInputEnvelope = {
    data: Enumerable<MessageCreateManyChannelsInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutChannelsInput = {
    update: XOR<UserUpdateWithoutChannelsInput, UserUncheckedUpdateWithoutChannelsInput>
    create: XOR<UserCreateWithoutChannelsInput, UserUncheckedCreateWithoutChannelsInput>
  }

  export type UserUpdateWithoutChannelsInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutChannelsMemberInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutChannelsMemberInput, UserUncheckedUpdateWithoutChannelsMemberInput>
    create: XOR<UserCreateWithoutChannelsMemberInput, UserUncheckedCreateWithoutChannelsMemberInput>
  }

  export type UserUpdateWithWhereUniqueWithoutChannelsMemberInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutChannelsMemberInput, UserUncheckedUpdateWithoutChannelsMemberInput>
  }

  export type UserUpdateManyWithWhereWithoutChannelsMemberInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMembersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    id42?: IntNullableFilter | number | null
    email?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
  }

  export type UserUpsertWithWhereUniqueWithoutChannelsOwnerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutChannelsOwnerInput, UserUncheckedUpdateWithoutChannelsOwnerInput>
    create: XOR<UserCreateWithoutChannelsOwnerInput, UserUncheckedCreateWithoutChannelsOwnerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutChannelsOwnerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutChannelsOwnerInput, UserUncheckedUpdateWithoutChannelsOwnerInput>
  }

  export type UserUpdateManyWithWhereWithoutChannelsOwnerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOwnersInput>
  }

  export type UserUpsertWithWhereUniqueWithoutChannelsAdminInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutChannelsAdminInput, UserUncheckedUpdateWithoutChannelsAdminInput>
    create: XOR<UserCreateWithoutChannelsAdminInput, UserUncheckedCreateWithoutChannelsAdminInput>
  }

  export type UserUpdateWithWhereUniqueWithoutChannelsAdminInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutChannelsAdminInput, UserUncheckedUpdateWithoutChannelsAdminInput>
  }

  export type UserUpdateManyWithWhereWithoutChannelsAdminInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAdminsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutChannelsMutsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutChannelsMutsInput, UserUncheckedUpdateWithoutChannelsMutsInput>
    create: XOR<UserCreateWithoutChannelsMutsInput, UserUncheckedCreateWithoutChannelsMutsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutChannelsMutsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutChannelsMutsInput, UserUncheckedUpdateWithoutChannelsMutsInput>
  }

  export type UserUpdateManyWithWhereWithoutChannelsMutsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMutsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutChannelsBandInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutChannelsBandInput, UserUncheckedUpdateWithoutChannelsBandInput>
    create: XOR<UserCreateWithoutChannelsBandInput, UserUncheckedCreateWithoutChannelsBandInput>
  }

  export type UserUpdateWithWhereUniqueWithoutChannelsBandInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutChannelsBandInput, UserUncheckedUpdateWithoutChannelsBandInput>
  }

  export type UserUpdateManyWithWhereWithoutChannelsBandInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutBandInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutChannelsInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChannelsInput, MessageUncheckedUpdateWithoutChannelsInput>
    create: XOR<MessageCreateWithoutChannelsInput, MessageUncheckedCreateWithoutChannelsInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChannelsInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChannelsInput, MessageUncheckedUpdateWithoutChannelsInput>
  }

  export type MessageUpdateManyWithWhereWithoutChannelsInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type UserCreateWithoutDmMessagesInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    BlockList?: BlockListCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutDmMessagesInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    BlockList?: BlockListUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutDmMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDmMessagesInput, UserUncheckedCreateWithoutDmMessagesInput>
  }

  export type channelsCreateWithoutMessagesInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
    Creator?: UserCreateNestedOneWithoutChannelsInput
    Members?: UserCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserCreateNestedManyWithoutChannelsMutsInput
    Band?: UserCreateNestedManyWithoutChannelsBandInput
  }

  export type channelsUncheckedCreateWithoutMessagesInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    userId?: number | null
    avatar?: string | null
    accessIsActived?: boolean
    Members?: UserUncheckedCreateNestedManyWithoutChannelsMemberInput
    Owners?: UserUncheckedCreateNestedManyWithoutChannelsOwnerInput
    Admins?: UserUncheckedCreateNestedManyWithoutChannelsAdminInput
    Muts?: UserUncheckedCreateNestedManyWithoutChannelsMutsInput
    Band?: UserUncheckedCreateNestedManyWithoutChannelsBandInput
  }

  export type channelsCreateOrConnectWithoutMessagesInput = {
    where: channelsWhereUniqueInput
    create: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutDmMessagesInput = {
    update: XOR<UserUpdateWithoutDmMessagesInput, UserUncheckedUpdateWithoutDmMessagesInput>
    create: XOR<UserCreateWithoutDmMessagesInput, UserUncheckedCreateWithoutDmMessagesInput>
  }

  export type UserUpdateWithoutDmMessagesInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutDmMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type channelsUpsertWithoutMessagesInput = {
    update: XOR<channelsUpdateWithoutMessagesInput, channelsUncheckedUpdateWithoutMessagesInput>
    create: XOR<channelsCreateWithoutMessagesInput, channelsUncheckedCreateWithoutMessagesInput>
  }

  export type channelsUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
  }

  export type channelsUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
  }

  export type UserCreateWithoutBlockListInput = {
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileCreateNestedOneWithoutUserInput
    dmMessages?: MessageCreateNestedManyWithoutUserInput
    channels?: channelsCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsCreateNestedManyWithoutMutsInput
    channelsBand?: channelsCreateNestedManyWithoutBandInput
  }

  export type UserUncheckedCreateWithoutBlockListInput = {
    id?: number
    id42?: number | null
    email: string
    username?: string
    password: string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    dmMessages?: MessageUncheckedCreateNestedManyWithoutUserInput
    channels?: channelsUncheckedCreateNestedManyWithoutCreatorInput
    channelsOwner?: channelsUncheckedCreateNestedManyWithoutOwnersInput
    channelsAdmin?: channelsUncheckedCreateNestedManyWithoutAdminsInput
    channelsMember?: channelsUncheckedCreateNestedManyWithoutMembersInput
    channelsMuts?: channelsUncheckedCreateNestedManyWithoutMutsInput
    channelsBand?: channelsUncheckedCreateNestedManyWithoutBandInput
  }

  export type UserCreateOrConnectWithoutBlockListInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlockListInput, UserUncheckedCreateWithoutBlockListInput>
  }

  export type UserUpsertWithoutBlockListInput = {
    update: XOR<UserUpdateWithoutBlockListInput, UserUncheckedUpdateWithoutBlockListInput>
    create: XOR<UserCreateWithoutBlockListInput, UserUncheckedCreateWithoutBlockListInput>
  }

  export type UserUpdateWithoutBlockListInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutBlockListInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type MessageCreateManyUserInput = {
    id?: number
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    channelsId?: string | null
  }

  export type BlockListCreateManyUserInput = {
    id?: number
    blockedId: number
  }

  export type channelsCreateManyCreatorInput = {
    id?: string
    type: string
    name: string
    password?: string | null
    accessPassword?: string | null
    avatar?: string | null
    accessIsActived?: boolean
  }

  export type MessageUpdateWithoutUserInput = {
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channels?: channelsUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageUncheckedUpdateManyWithoutDmMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BlockListUpdateWithoutUserInput = {
    blockedId?: IntFieldUpdateOperationsInput | number
  }

  export type BlockListUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
  }

  export type BlockListUncheckedUpdateManyWithoutBlockListInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
  }

  export type channelsUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutChannelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type channelsUpdateWithoutOwnersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutOwnersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutChannelsOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type channelsUpdateWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutChannelsAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type channelsUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutChannelsMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type channelsUpdateWithoutMutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Band?: UserUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutMutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Band?: UserUncheckedUpdateManyWithoutChannelsBandNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutChannelsMutsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type channelsUpdateWithoutBandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Creator?: UserUpdateOneWithoutChannelsNestedInput
    Members?: UserUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUpdateManyWithoutChannelsMutsNestedInput
    Messages?: MessageUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateWithoutBandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
    Members?: UserUncheckedUpdateManyWithoutChannelsMemberNestedInput
    Owners?: UserUncheckedUpdateManyWithoutChannelsOwnerNestedInput
    Admins?: UserUncheckedUpdateManyWithoutChannelsAdminNestedInput
    Muts?: UserUncheckedUpdateManyWithoutChannelsMutsNestedInput
    Messages?: MessageUncheckedUpdateManyWithoutChannelsNestedInput
  }

  export type channelsUncheckedUpdateManyWithoutChannelsBandInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    accessPassword?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    accessIsActived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateManyChannelsInput = {
    id?: number
    fromId?: number | null
    fromName?: string | null
    toId?: number | null
    content: string
    createdAt?: Date | string
    userId?: number | null
  }

  export type UserUpdateWithoutChannelsMemberInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutChannelsOwnerInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOwnersInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutChannelsAdminInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAdminsInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutChannelsMutsInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsBand?: channelsUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsMutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsBand?: channelsUncheckedUpdateManyWithoutBandNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutChannelsBandInput = {
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUpdateManyWithoutUserNestedInput
    channels?: channelsUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUpdateManyWithoutMutsNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelsBandInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    dmMessages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    BlockList?: BlockListUncheckedUpdateManyWithoutUserNestedInput
    channels?: channelsUncheckedUpdateManyWithoutCreatorNestedInput
    channelsOwner?: channelsUncheckedUpdateManyWithoutOwnersNestedInput
    channelsAdmin?: channelsUncheckedUpdateManyWithoutAdminsNestedInput
    channelsMember?: channelsUncheckedUpdateManyWithoutMembersNestedInput
    channelsMuts?: channelsUncheckedUpdateManyWithoutMutsNestedInput
  }

  export type UserUncheckedUpdateManyWithoutBandInput = {
    id?: IntFieldUpdateOperationsInput | number
    id42?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUpdateWithoutChannelsInput = {
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutDmMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromId?: NullableIntFieldUpdateOperationsInput | number | null
    fromName?: NullableStringFieldUpdateOperationsInput | string | null
    toId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}