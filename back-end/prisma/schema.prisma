// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendshipStatus {
  ACCEPTED
  REFUSED
  BLOCKED
  PENDING
}

model User {
  id             String      @id @default(uuid())
  id42           String?
  idGoogle       String?
  email          String      @unique
  username       String      @unique @default("")
  password       String
  twoFASecret    String
  twoFAActive    Boolean     @default(false)
  profile        Profile?
  dmMessages     Message[]
  BlockList      BlockList[]
  channels       channels[]
  channelsOwner  channels[]  @relation("Owners")
  channelsAdmin  channels[]  @relation("Admins")
  channelsMember channels[]  @relation("Members")
  channelsMuts   channels[]  @relation("MutedUsers")
  channelsBand   channels[]  @relation("BannedUsers")
  muted          Muted[]
  sentRequests  Friendship[] @relation("FriendshipSender")
  receivedRequests Friendship[] @relation("FriendshipReceiver")
}

model Friendship {
  id        String @id @default(uuid())
  senderId  String 
  receiverId String
  status    FriendshipStatus @default(PENDING)
  
  sender    User @relation(name: "FriendshipSender", fields: [senderId], references: [id])
  receiver  User @relation(name: "FriendshipReceiver", fields: [receiverId], references: [id])
  
  @@unique([senderId, receiverId])
}

model Profile {
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  firstName       String
  lastName        String
  email           String
  username        String
  status          String    @default("offline")
  lastMessage     String?
  lastMessageTime DateTime?
  avatar          String?
  background      String?
  gaemePlayed     Int       @default(0)
  win             Int       @default(0)
  lose            Int       @default(0)
  points          Int       @default(0)
  level           Float     @default(0.0)
}

model channels {
  id              String    @id @default(uuid())
  type            String // public or private or protected
  name            String    @unique
  password        String?   @default("")
  accessPassword  String?   @default("")
  Creator         User?     @relation(fields: [userId], references: [id])
  userId          String?
  Members         User[]    @relation("Members")
  Owners          User[]    @relation("Owners")
  Admins          User[]    @relation("Admins")
  Muts            User[]    @relation("MutedUsers")
  Band            User[]    @relation("BannedUsers")
  avatar          String?
  accessIsActived Boolean   @default(false)
  Messages        Message[]
}

model Message {
  id         Int       @id @default(autoincrement())
  fromId     String?
  fromName   String?
  toId       String?
  content    String
  createdAt  DateTime  @default(now())
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?
  channels   channels? @relation(fields: [channelsId], references: [id])
  channelsId String?
}

model BlockList {
  id        Int     @id @default(autoincrement())
  blockedId String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Muted {
  id          Int       @id @default(autoincrement())
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  channelId   String?
  timeOnMute  DateTime  @default(now())
  timeOffMute DateTime?
}
